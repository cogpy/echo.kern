.\" B-Series Computation Manual Page
.\" ==================================
.\" B-series rooted tree differential computation for Echo.Kern
.\"
.TH BSERIES 4 "2024-10-24" "Echo.Kern v1.0" "Kernel Interfaces"
.SH NAME
bseries \- B-series rooted tree elementary differential computation
.SH SYNOPSIS
.nf
.B #include <dtesn/bseries.h>
.sp
.BI "int fd = open(" "\"/dev/dtesn/bseries\"" ", " flags );
.fi
.SH DESCRIPTION
The
.B bseries
kernel interface provides B-series computation for ODE numerical
integration using rooted tree structures. B-series are formal
expansions of numerical methods based on elementary differentials
indexed by rooted trees following OEIS A000081 enumeration.
.PP
Applications include:
.IP \(bu 2
.B High-order ODE integration
\- Runge-Kutta and related methods
.IP \(bu 2
.B Neural ODE
\- Continuous-depth neural networks
.IP \(bu 2
.B Hamiltonian mechanics
\- Symplectic integrators
.IP \(bu 2
.B P-System evolution
\- Membrane computing dynamics
.SH ROOTED TREE NOTATION
Trees are represented in bracket notation:
.PP
.nf
    []        - Empty tree (order 0)
    [t]       - Single tree t
    [t1,t2]   - Tree with children t1, t2
.fi
.PP
Examples:
.PP
.nf
    []        - Identity (order 1)
    [[]]      - First derivative (order 2)
    [[],[]]   - Second derivative (order 3)
    [[[]]]    - Third derivative composition (order 4)
.fi
.SH TREE PROPERTIES
.SS Order
Number of vertices in the tree: |t| = 1 + \(S+|t_i|
.SS Elementary Weight
\(al(t) = 1/\(ga(t) where \(ga is density
.SS Density
\(ga(t) = |t| \(mu \(sg(t) \(mu \(*P \(ga(t_i)
.SS Symmetry Factor
\(sg(t) = number of automorphisms
.SH STRUCTURE
.nf
struct dtesn_bseries_tree_t {
    uint32_t tree_id;              /* Unique identifier */
    uint32_t order;                /* Tree order |t| */
    uint32_t num_children;         /* Number of subtrees */
    dtesn_bseries_tree_t **children;  /* Child trees */
    
    /* Computed properties */
    float alpha;                   /* Elementary weight */
    uint32_t gamma;                /* Density */
    uint32_t symmetry;             /* Symmetry factor */
    float coefficient;             /* B-series coefficient */
};
.fi
.SH B-SERIES FORMULA
A numerical method has B-series:
.PP
.nf
    y_{n+1} = y_n + h \(S+ \(al(t) \(md a(t) F(t)(y_n)
.fi
.PP
Where:
.IP \(bu 2
.I h
is step size
.IP \(bu 2
.I \(al(t)
is elementary weight
.IP \(bu 2
.I a(t)
is method coefficient
.IP \(bu 2
.I F(t)
is elementary differential
.SH ELEMENTARY DIFFERENTIALS
For ODE y' = f(y), elementary differentials are:
.PP
.nf
    []         : F() = f(y)
    [[]]       : F([]) = f'(y)f(y)
    [[],[]]    : F([],[]) = f''(y)(f(y), f(y))
    [[[]]]     : F([[]]) = f'(y)f'(y)f(y)
.fi
.SH IOCTL OPERATIONS
.TP
.B BSERIES_IOC_PARSE_TREE
Parse tree from bracket notation
.RS
.nf
struct bseries_parse_params {
    const char *expression;    /* Tree notation */
    dtesn_bseries_tree_t **tree;  /* Output tree */
};
.fi
.RE
.TP
.B BSERIES_IOC_COMPUTE_ORDER
Compute tree order
.RS
.nf
struct bseries_order_params {
    dtesn_bseries_tree_t *tree;
    uint32_t *order;          /* Output order */
};
.fi
.RE
.TP
.B BSERIES_IOC_COMPUTE_ALPHA
Compute elementary weight
.RS
.nf
struct bseries_alpha_params {
    dtesn_bseries_tree_t *tree;
    float *alpha;             /* Output weight */
};
.fi
.RE
.TP
.B BSERIES_IOC_EVALUATE_DIFFERENTIAL
Evaluate elementary differential
.RS
.nf
struct bseries_eval_params {
    dtesn_bseries_tree_t *tree;
    const float *state;       /* Current state */
    uint32_t state_size;
    float *result;            /* Output differential */
};
.fi
.RE
.TP
.B BSERIES_IOC_ENUMERATE_TREES
Enumerate all trees up to order
.RS
.nf
struct bseries_enum_params {
    uint32_t max_order;
    dtesn_bseries_tree_t ***trees;  /* Output array */
    uint32_t *num_trees;      /* Output count */
};
.fi
.RE
.SH OEIS A000081
Number of rooted trees by order:
.PP
.nf
    Order    Trees
    0        1
    1        1
    2        1
    3        2
    4        4
    5        9
    6        20
    7        48
    8        115
    9        286
    10       719
.fi
.PP
Formula: a(n) ~ D * \(al^n * n^(-3/2)
where D \(~~ 0.4399, \(al \(~~ 2.9558
.SH RUNGE-KUTTA METHODS
Common methods expressed as B-series:
.SS Euler Method (order 1)
.nf
    [] : a([]) = 1
.fi
.SS Midpoint Method (order 2)
.nf
    [] : a([]) = 1
    [[]] : a([[]]) = 1/2
.fi
.SS RK4 (order 4)
.nf
    [] : a([]) = 1
    [[]] : a([[]]) = 1/2
    [[],[]] : a([[],[]]) = 1/6
    [[[]]] : a([[[]]]) = 1/6
    [[[],[]]] : a([[[],[]]]) = 1/24
.fi
.SH PERFORMANCE
Computation targets:
.TP
.B Tree parsing
\(le 50\(mus for order \(le 10
.TP
.B Order computation
\(le 10\(mus per tree
.TP
.B Weight computation
\(le 20\(mus per tree
.TP
.B Differential evaluation
\(le 100\(mus per tree
.SH FILES
.TP
.I /dev/dtesn/bseries
B-series control device
.TP
.I /sys/class/dtesn/bseries
Sysfs entries
.TP
.I /proc/dtesn/trees
Enumerated tree cache
.SH EXAMPLES
.SS Parsing Tree
.nf
#include <dtesn/bseries.h>

int fd = open("/dev/dtesn/bseries", O_RDWR);

dtesn_bseries_tree_t *tree;
struct bseries_parse_params parse = {
    .expression = "[[[]]]",
    .tree = &tree
};

ioctl(fd, BSERIES_IOC_PARSE_TREE, &parse);
.fi
.SS Computing Properties
.nf
uint32_t order;
float alpha;

struct bseries_order_params ord = {
    .tree = tree,
    .order = &order
};
ioctl(fd, BSERIES_IOC_COMPUTE_ORDER, &ord);

struct bseries_alpha_params alph = {
    .tree = tree,
    .alpha = &alpha
};
ioctl(fd, BSERIES_IOC_COMPUTE_ALPHA, &alph);

printf("Tree order: %u, alpha: %f\\n", order, alpha);
.fi
.SS Enumerating Trees
.nf
dtesn_bseries_tree_t **trees;
uint32_t num_trees;

struct bseries_enum_params enum_p = {
    .max_order = 5,
    .trees = &trees,
    .num_trees = &num_trees
};

ioctl(fd, BSERIES_IOC_ENUMERATE_TREES, &enum_p);

printf("Found %u trees up to order 5\\n", num_trees);
.fi
.SH ERRORS
.TP
.B BSERIES_EINVAL
Invalid tree expression or parameters
.TP
.B BSERIES_EPARSE
Parse error in tree notation
.TP
.B BSERIES_EORDER
Order exceeds maximum (typically 16)
.TP
.B BSERIES_ENOTIME
Real-time constraint violation
.SH SEE ALSO
.BR dtesn (4),
.BR psystem (4),
.BR esn (4),
.BR ode (7)
.SH REFERENCES
.IP [1]
Butcher, "Numerical Methods for Ordinary Differential Equations" (2016)
.IP [2]
Hairer et al., "Solving Ordinary Differential Equations I" (1993)
.IP [3]
OEIS A000081 - Number of unlabeled rooted trees
.IP [4]
Chartier and Hairer, "Numerical Methods for Differential Equations" (2012)
.SH AUTHORS
Echo.Kern Development Team
.br
https://github.com/cogpy/echo.kern
